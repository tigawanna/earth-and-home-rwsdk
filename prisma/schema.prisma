// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"

  runtime                = "workerd"
  moduleFormat           = "esm"
  generatedFileExtension = "ts"
  importFileExtension    = "ts"

  output          = "../generated/prisma"
  previewFeatures = ["queryCompiler", "driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) // User ID (UUID-based)
  username  String   @unique
  createdAt DateTime @default(now())

  credentials Credential[] // Relationship: One user can have many credentials
  properties  Property[] // Relationship: One user can list many properties
  favorites   PropertyFavorite[] // Relationship: Users can favorite properties
}

model Credential {
  id           String   @id @default(uuid()) // Internal DB ID
  userId       String   @unique // Every credential is linked to a specific user
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  credentialId String   @unique // WebAuthn credential identifier
  publicKey    Bytes
  counter      Int      @default(0)

  @@index([credentialId])
  @@index([userId])
}

model Property {
  id           String         @id @default(uuid())
  title        String
  description  String
  location     String
  city         String? // Added for better location filtering
  state        String? // Added for better location filtering
  zipCode      String? // Added for better location filtering
  price        Int // Price in cents to avoid floating point issues
  propertyType PropertyType   @default(HOUSE) // Added property type
  bedrooms     Int
  bathrooms    Int
  squareFeet   Int
  yearBuilt    Int? // Added year built for filtering
  imageUrl     String?
  imagesJson   String? // JSON string of image URLs
  featuresJson String? // JSON string of features (Pool, Garage, Garden, etc.)
  isFeatured   Boolean        @default(false)
  status       PropertyStatus @default(FOR_SALE)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Relationships
  listerId  String
  lister    User               @relation(fields: [listerId], references: [id])
  favorites PropertyFavorite[]

  @@index([status])
  @@index([isFeatured])
  @@index([price])
  @@index([location])
  @@index([city])
  @@index([propertyType])
  @@index([bedrooms])
  @@index([bathrooms])
  @@index([squareFeet])
}

model PropertyFavorite {
  id         String   @id @default(uuid())
  userId     String
  propertyId String
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])

  @@unique([userId, propertyId]) // A user can only favorite a property once
}

enum PropertyStatus {
  FOR_SALE
  SOLD
  PENDING
  OFF_MARKET
}

enum PropertyType {
  HOUSE
  CONDO
  TOWNHOUSE
  APARTMENT
  VILLA
  LAND
}
